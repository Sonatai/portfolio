{"version":3,"sources":["Component/Footer.tsx","StyledLib/Themes/ColorPalette.tsx","StyledLib/Themes/DarkTheme.tsx","StyledLib/Themes/LightTheme.tsx","Component/Header.tsx","Pages/Home.tsx","StyledLib/Themes/GlobalStyle.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","ColorPalette","black","white","grey","light","medium","dark","DarkTheme","colors","background","main","fonts","LightTheme","Header","props","useState","Checked","setChecked","useEffect","setTheme","htmlFor","type","id","checked","onClick","onChange","HomePage","GlobalStyle","createGlobalStyle","p","theme","App","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6LAWeA,EATU,WACxB,OACC,oCACC,kEACA,oECGYC,EATM,CACpBC,MAAO,UACPC,MAAO,UACPC,KAAM,CACLC,MAAO,UACPC,OAAQ,UACRC,KAAM,YCHFC,EAA0B,CAC/BC,OAAQ,CACPC,WAAY,CACXC,KAAMV,EAAaC,OAEpBU,MAAO,CACND,KAAMV,EAAaG,KAAKC,SCNrBQ,EAA2B,CAChCJ,OAAQ,CACPC,WAAY,CACXC,KAAMV,EAAaE,OAEpBS,MAAO,CACND,KAAMV,EAAaG,KAAKG,QCkBZO,EAvB6B,SAACC,GAAW,IAAD,EACxBC,oBAAS,GADe,mBAC/CC,EAD+C,KACtCC,EADsC,KAStD,OAPAC,qBAAU,WAERF,EAAUF,EAAMK,SAASZ,GAAaO,EAAMK,SAASP,KAGpD,CAACI,IAGH,sGACyE,IACxE,2BAAOI,QAAQ,SAAf,cAA0C,IAC1C,2BACCC,KAAK,WACLC,GAAG,QACHC,QAASP,EACTQ,QAAS,kBAAMP,GAAYD,IAC3BS,SAAU,iBCTCC,EATY,WAC1B,OACC,oCACC,mFACA,gH,+TCNH,IAyCeC,EAzCKC,YAAH,KAoBM,SAACC,GAAD,OAAOA,EAAEC,MAAMtB,OAAOC,WAAWC,QAC5C,SAACmB,GAAD,OAAOA,EAAEC,MAAMtB,OAAOG,MAAMD,QCCzBqB,EAdO,WAAO,IAAD,EACDhB,mBAASH,GADR,mBACpBkB,EADoB,KACbX,EADa,KAE3B,OACC,oCACC,kBAAC,IAAD,CAAeW,MAAOA,GACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQX,SAAUA,IAClB,kBAACa,EAAD,MACA,kBAAC,EAAD,SCNgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDiInB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3d6becea.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Footer: React.FC = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<pre>Link zum Github | Link zum Itchio</pre>\r\n\t\t\t<pre>¬© Copyright 2020 Jenny Gebauer</pre>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n","const ColorPalette = {\r\n\tblack: '#000000',\r\n\twhite: '#ffffff',\r\n\tgrey: {\r\n\t\tlight: '#AAAAAA',\r\n\t\tmedium: '#666666',\r\n\t\tdark: '#333333',\r\n\t},\r\n};\r\nexport default ColorPalette;\r\n","import { DefaultTheme } from 'styled-components';\r\nimport ColorPalette from './ColorPalette';\r\n\r\nconst DarkTheme: DefaultTheme = {\r\n\tcolors: {\r\n\t\tbackground: {\r\n\t\t\tmain: ColorPalette.black,\r\n\t\t},\r\n\t\tfonts: {\r\n\t\t\tmain: ColorPalette.grey.light,\r\n\t\t},\r\n\t},\r\n};\r\n\r\nexport { DarkTheme };\r\n","import { DefaultTheme } from 'styled-components';\r\nimport ColorPalette from './ColorPalette';\r\n\r\nconst LightTheme: DefaultTheme = {\r\n\tcolors: {\r\n\t\tbackground: {\r\n\t\t\tmain: ColorPalette.white,\r\n\t\t},\r\n\t\tfonts: {\r\n\t\t\tmain: ColorPalette.grey.dark,\r\n\t\t},\r\n\t},\r\n};\r\n\r\nexport { LightTheme };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { DarkTheme } from '../StyledLib/Themes/DarkTheme';\r\nimport { LightTheme } from '../StyledLib/Themes/LightTheme';\r\n\r\nconst Header: React.FC<{ setTheme: any }> = (props) => {\r\n\tconst [Checked, setChecked] = useState(false);\r\n\tuseEffect(() => {\r\n\t\tconst setTheme = (): void => {\r\n\t\t\tChecked ? props.setTheme(DarkTheme) : props.setTheme(LightTheme);\r\n\t\t};\r\n\t\treturn setTheme();\r\n\t}, [Checked]);\r\n\r\n\treturn (\r\n\t\t<h3>\r\n\t\t\tHome | Game Projects | Software Projects | Jams | Resume | Contact Me |{' '}\r\n\t\t\t<label htmlFor='theme'>Dark Theme</label>{' '}\r\n\t\t\t<input\r\n\t\t\t\ttype='checkbox'\r\n\t\t\t\tid='theme'\r\n\t\t\t\tchecked={Checked}\r\n\t\t\t\tonClick={() => setChecked(!Checked)}\r\n\t\t\t\tonChange={() => {}}\r\n\t\t\t/>\r\n\t\t</h3>\r\n\t);\r\n};\r\nexport default Header;\r\n","import React from 'react';\r\nimport Footer from '../Component/Footer';\r\nimport Header from '../Component/Header';\r\n\r\nconst HomePage: React.FC = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h1>üéâHier entsteht ein PortfolioüòÅ</h1>\r\n\t\t\t<pre>Ist aber noch in Bearbeitung ü§¢ü§¢ü§¢ü§¢</pre>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default HomePage;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n*, button, input {\r\n    \r\n}\r\n\r\nhtml {\r\n  \r\n}\r\n\r\n*,\r\n*:before,\r\n*:after {\r\n    \r\n}\r\n\r\nhtml, body {\r\n \r\n}\r\n\r\nbody {\r\n    background-color:${(p) => p.theme.colors.background.main};\r\n    color:${(p) => p.theme.colors.fonts.main}\r\n}\r\n\r\nheader {\r\n    \r\n}\r\n\r\na {\r\n   \r\n}\r\n\r\nul {\r\n    \r\n}\r\n\r\nstrong {\r\n    \r\n}\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React, { useState } from 'react';\n\nimport Footer from './Component/Footer';\nimport Header from './Component/Header';\nimport HomePage from './Pages/Home';\nimport { DarkTheme } from './StyledLib/Themes/DarkTheme';\nimport GlobalStyle from './StyledLib/Themes/GlobalStyle';\nimport { ThemeProvider } from 'styled-components';\nimport { LightTheme } from './StyledLib/Themes/LightTheme';\n\nconst App: React.FC = () => {\n\tconst [theme, setTheme] = useState(LightTheme);\n\treturn (\n\t\t<>\n\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t<GlobalStyle />\n\t\t\t\t<Header setTheme={setTheme} />\n\t\t\t\t<HomePage />\n\t\t\t\t<Footer />\n\t\t\t</ThemeProvider>\n\t\t</>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}